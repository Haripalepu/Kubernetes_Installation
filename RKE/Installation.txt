
# RKE Cluster Setup for Management and Data Plane

This document outlines the steps to set up the **RKE Cluster** with a management server, data plane, and NLB. It also includes the steps to assign roles and configure DNS for accessing the cluster.

## Prerequisites

- **Terraform**: Ensure you have `Terraform` installed to apply the infrastructure changes.
- **RKE Binary (Linux AMD64)**: The Rancher Kubernetes Engine (RKE) binary for managing the cluster.
- **AWS Access**: Ensure your AWS CLI is configured with necessary permissions.
- **DNS Setup**: We will create a Route 53 record to map the NLB to the custom domain.

## Steps to Set Up the Cluster

### 1. Run Terraform to Create Infrastructure

Apply the Terraform configuration to create the **Cluster Plane**, **Data Plane**, **Management Server**, and **NLB**. This will provision the necessary resources like EC2 instances, Network Load Balancer (NLB), security groups, etc.

### 2. Assign a Role to RKE Management Server

Ensure that the management server has the correct IAM role for managing AWS resources such as access to Route 53, EC2, etc.

### 3. Download and Set Up RKE Binary

On the management server, change to the `/usr/local/bin` directory and download the RKE binary for Linux AMD64:

- Navigate to the `/usr/local/bin` directory:
  
  ```bash
  cd /usr/local/bin
  ```
## Download kubectl Binary
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

chmod 777 kubectl

- Download the RKE binary:

  ```bash
  wget https://github.com/rancher/rke/releases/download/v1.5.8/rke_linux-amd64
  ```

- Rename the binary and make it executable:

  ```bash
  mv rke_linux-amd64 rke
  chmod +x rke  # Make the binary executable
  ```

### 4. Add the PEM Key

Place your PEM key in a secure location on the management server. This key will be used for SSH access to your nodes in the RKE cluster.

### 5. Create Route 53 DNS Record for NLB

Create a Route 53 DNS record to map the domain `rke.haripalepu.site` to the **NLB**. This will allow you to access the cluster through a user-friendly domain name.

### 6. Update `cluster.yml` File

Edit the `cluster.yml` file:
- Replace the `IP` addresses for your cluster nodes.
- Specify the correct **key pair** path.
- Replace the Kubernetes version and **NLB DNS**.
- Ensure that the management server is correctly defined.

### 7. Clone the Repo on the Management Server

Clone the repository containing your `cluster.yml` file to the management server:

- Clone the repository:

  ```bash
  git clone https://github.com/Haripalepu/Kubernetes_Installation.git
  ```

- Navigate to the directory where the `cluster.yml` file is located.

### 8. Run `rke up`

Once the `cluster.yml` file is updated, run the `rke up --ignore-docker-version --config cluster.yml
` command from the same location to deploy the RKE cluster. After a successful setup, the `kube_config_cluster.yml` file will be generated, which will allow you to interact with the Kubernetes cluster using `kubectl`.

---

Once the cluster is up and running, use the generated `kube_config_cluster.yml` file to access the cluster and perform management tasks.


replace the ip address with rke.haripalepu.site to do load balancing server: "https://54.84.117.38:6443"

export KUBECONFIG=/home/ubuntu/Kubernetes_Installation/RKE/kube_config_cluster.yml
echo $KUBECONFIG
